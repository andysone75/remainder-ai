<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notes Manager with Assistant</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        h1 {
            grid-column: 1 / -1;
            color: #333;
            text-align: center;
        }

        .panel {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
        }

        #notes-container {
            min-height: 300px;
            margin: 10px 0;
        }

        .note {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 3px;
            padding: 10px;
            margin: 5px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: move;
        }

            .note:hover {
                background-color: #f0f0f0;
            }

        .note-actions {
            display: flex;
            gap: 5px;
        }

        button {
            padding: 5px 10px;
            cursor: pointer;
        }

        .delete-btn {
            background-color: #ff6b6b;
            color: white;
            border: none;
            border-radius: 3px;
        }

            .delete-btn:hover {
                background-color: #ff5252;
            }

        #add-note-form {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        #new-note-input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 3px;
        }

        #add-note-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 8px 15px;
        }

            #add-note-btn:hover {
                background-color: #45a049;
            }

        /* Chat styles */
        #chat-container {
            display: flex;
            flex-direction: column;
            height: 500px;
        }

        #chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #fafafa;
        }

        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 15px;
            max-width: 80%;
        }

        .user-message {
            background-color: #e3f2fd;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .bot-message {
            background-color: #f1f1f1;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }

        #chat-form {
            display: flex;
            gap: 10px;
        }

        #chat-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            max-height: 100px;
            resize: none;
        }

        #send-btn {
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 0 20px;
            cursor: pointer;
        }

            #send-btn:hover {
                background-color: #0b7dda;
            }

        .typing-indicator {
            color: #888;
            font-style: italic;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <h1>Notes Manager with Assistant</h1>

    <div class="panel">
        <h2>Notes</h2>
        <form id="add-note-form">
            <input type="text" id="new-note-input" placeholder="Enter note text..." required>
            <button type="submit" id="add-note-btn">Add Note</button>
        </form>

        <div id="notes-container">
            <!-- Notes will appear here -->
        </div>
    </div>

    <div class="panel">
        <h2>Assistant</h2>
        <div id="chat-container">
            <div id="chat-messages">
                <div class="message bot-message">Hello! I'm your notes assistant. How can I help you today?</div>
            </div>
            <form id="chat-form">
                <textarea id="chat-input" placeholder="Type your message here..." maxlength="200" required></textarea>
                <button type="submit" id="send-btn">Send</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Notes functionality
            const notesContainer = document.getElementById('notes-container');
            const addNoteForm = document.getElementById('add-note-form');
            const newNoteInput = document.getElementById('new-note-input');

            addNoteForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const noteText = newNoteInput.value.trim();
                if (noteText) {
                    addNote(noteText);
                    newNoteInput.value = '';
                }
            });

            function addNote(text) {
                const noteId = Date.now();
                const noteElement = document.createElement('div');
                noteElement.className = 'note';
                noteElement.dataset.id = noteId;
                noteElement.draggable = true;

                noteElement.innerHTML = `
                        <span>${text}</span>
                        <div class="note-actions">
                            <button class="delete-btn">Delete</button>
                        </div>
                    `;

                noteElement.querySelector('.delete-btn').addEventListener('click', function () {
                    noteElement.remove();
                });

                noteElement.addEventListener('dragstart', function (e) {
                    e.dataTransfer.setData('text/plain', noteId);
                    setTimeout(() => noteElement.classList.add('dragging'), 0);
                });

                noteElement.addEventListener('dragend', function () {
                    noteElement.classList.remove('dragging');
                });

                notesContainer.appendChild(noteElement);
                noteElement.scrollIntoView({ behavior: 'smooth' });
            }

            notesContainer.addEventListener('dragover', function (e) {
                e.preventDefault();
                const draggingElement = document.querySelector('.dragging');
                const afterElement = getDragAfterElement(notesContainer, e.clientY);

                if (afterElement == null) {
                    notesContainer.appendChild(draggingElement);
                } else {
                    notesContainer.insertBefore(draggingElement, afterElement);
                }
            });

            notesContainer.addEventListener('dragenter', function (e) {
                e.preventDefault();
            });

            function getDragAfterElement(container, y) {
                const draggableElements = [...container.querySelectorAll('.note:not(.dragging)')];

                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;

                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }

            // Chat functionality
            const chatForm = document.getElementById('chat-form');
            const chatInput = document.getElementById('chat-input');
            const chatMessages = document.getElementById('chat-messages');

            let chatHistory = [];
            const MAX_HISTORY_LENGTH = 10;

            // Function to render entire chat history
            function renderChatHistory() {
                chatMessages.innerHTML = '';
                chatHistory.forEach(msg => {
                    if (msg.role === 'user') {
                        addMessage(msg.content, 'user');
                    } else if (msg.role === 'assistant') {
                        addMessage(msg.content, 'bot');
                    }
                });
            }

            // Function to add a single message to UI (and optionally to history)
            function addMessage(text, sender) {
                const messageElement = document.createElement('div');
                messageElement.className = `message ${sender}-message`;
                messageElement.textContent = text;
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Initial render
            renderChatHistory();

            chatForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const message = chatInput.value.trim();
                if (message) {
                    // Remove oldest messages if history is full (keep one space for new user message)
                    while (chatHistory.length >= MAX_HISTORY_LENGTH - 1) {
                        chatHistory.shift(); // Remove oldest message
                    }

                    // Add user message to history
                    const userMessage = { role: 'user', content: message };
                    chatHistory.push(userMessage);
                    addMessage(message, 'user');

                    // Clear input field
                    chatInput.value = '';

                    // Send to server
                    fetch("api/msg", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ history: chatHistory })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data['type'] === 'error') {
                                // Remove failed user message from history
                                chatHistory.pop();
                                addMessage("Server error: " + data['content'], 'bot');
                            } else {
                                const an = data['content'];
                                const ans = JSON.parse(an);
                                if (ans['type'] === 'create') {
                                    // Create a new reminder/note
                                    const taskText = ans['task'];
                                    addNote(taskText); // Add as a new note
                                }

                                const botMessage = {
                                    role: 'assistant',
                                    content: ans['message'],
                                    type: ans['type']
                                };

                                // Remove oldest messages if adding bot response would exceed limit
                                while (chatHistory.length >= MAX_HISTORY_LENGTH - 1) {
                                    chatHistory.shift();
                                }

                                chatHistory.push(botMessage);
                                addMessage(botMessage.content, 'bot');
                            }
                        })
                        .catch(error => {
                            // Remove failed user message from history
                            chatHistory.pop();
                            addMessage("Network error: Failed to get response from server", 'bot');
                        });
                }
            });

            // Prevent new lines in chat input (but allow Shift+Enter for new lines)
            chatInput.addEventListener('keydown', function (e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    chatForm.dispatchEvent(new Event('submit'));
                }
            });
        });
    </script>
</body>
</html>